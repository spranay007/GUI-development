$version 6.60

// This is the root component of the entire GUI application.
$rect <20,20,220,60>
$output false
class Application : Core::Root
{
  $rect <820,0,1020,40>
  inherited property Bounds = <0,0,800,480>;

  // To do:
  // 
  // - The simplest way to compose the appearance of the application is to use the \
  // 'Views' and 'Widget Sets' from the Gallery.
  // 
  // - To react to touch or keyboard events use the templates from the Gallery folder \
  // 'Event Handlers'.
  // 
  // - To perform transitions (animations) use the templates from the Gallery folder \
  // 'Effects'.
  // 
  // - To store values use the 'Variable', 'Array' and 'Property' templates available \
  // in the Gallery folder 'Chora'.
  // 
  // - To implement behavior use the 'Method' and 'Slot Method' templates available \
  // in the Gallery folder 'Chora'.
  note legend Note1
  {
    attr Bounds = <10,500,790,700>;
  }

  $rect <20,20,160,60>
  object Views::Rectangle Rectangle
  {
    preset Bounds = <0,0,800,480>;
    preset Color = #4F65CBFF;
  }

  $rect <820,100,1020,140>
  slot OnPress
  {
    // Activate the effect to play the animation forward
    FloatEffect.Reversed = false;
    FloatEffect.Enabled  = true;
  }

  $rect <820,149,1020,189>
  slot OnRelease
  {
    // Activate the effect to play the animation forward
    FloatEffect.Reversed = true;
    FloatEffect.Enabled  = true;
  }

  $rect <20,20,160,60>
  object Application::SimpleGauge SimpleGauge
  {
    preset Bounds = <9,9,789,469>;
  }

  $rect <820,49,1020,89>
  object Effects::FloatEffect FloatEffect
  {
    preset CycleDuration = 5000;
    preset Enabled = false;
    preset Value2 = 2.0;
    preset Value1 = -2.0;
    preset Outlet = ^SimpleGauge.Position;
  }

  $rect <20,20,160,60>
  object Core::SimpleTouchHandler SimpleTouchHandler
  {
    preset Point4 = <9,9>;
    preset Point3 = <789,9>;
    preset Point2 = <789,469>;
    preset Point1 = <9,469>;
    preset OnRelease = OnRelease;
    preset OnPress = OnPress;
  }
}

// To do:
// 
// - Open the 'Application' component for editing. It represents your entire GUI. \
// Use widgets, views, event handlers and effects from the Gallery to assemble there \
// your desired GUI look and feel.
// 
// - Create your own GUI components, widgets, panels, etc. The Gallery folder 'Components' \
// contains for this purpose various templates you can simply add to the unit and \
// thus start your own component development.
// 
// - You can add your own bitmap and font resources to the unit. Use the templates \
// 'Bitmap Resource' and 'Font Resource' from the Gallery folder 'Components' for \
// this purpose.
// 
// - You can add here also constants to store e.g. multilingual text fragments. Use \
// for this purpose the template 'Constant' from the Gallery folder 'Chora'.
// 
// - To add an interface for communication with the target device use the template \
// 'Device Interface' from the Gallery folder 'Device'.
note legend Note1
{
  attr Bounds = <30,250,720,550>;
}

// This is a font resource.
$rect <230,20,430,60>
$output false
resource Resources::Font Font
{
  attr fontname FontName = Arial;
  attr fontheight Height = 32;
  attr fontquality Quality = High;
  attr fontranges Ranges = 0x20-0xFF;
  attr fontaspectratio AspectRatio = 1.0;
  attr fontbold Bold = false;
  attr fontitalic Italic = false;
}

$rect <20,70,220,110>
$output false
class SimpleGauge : Core::Group
{
  $rect <9,529,209,569>
  inherited property Bounds = <0,0,800,480>;

  $rect <9,580,209,620>
  inherited method UpdateViewState()
  {
    super( aState );

    // Arrange the needle so that it appears rotated accordingly to the current value 
    // of the property Position. Assume, Position is valid in range -1.0 .. + 1.0
    WarpImage.RotateAndScale( <400,350>, -90.0 * Position, 2.0, 2.0 );
  }

  // To do:
  // 
  // - Adjust the visible size of your component (the thick blue border).
  // 
  // - The simplest way to compose the appearance of the component is to use the \
  // 'Views' and 'Widget Sets' from the Gallery.
  // 
  // - To react to touch or keyboard events use the templates from the Gallery folder \
  // 'Event Handlers'.
  // 
  // - To perform transitions (animations) use the templates from the Gallery folder \
  // 'Effects'.
  // 
  // - To implement the interface of the component use the 'Property' template from \
  // the Gallery folder 'Chora'.
  // 
  // - To store values use the 'Variable' and 'Array' templates available in the \
  // Gallery folder 'Chora'.
  // 
  // - To implement behavior use the 'Method' and 'Slot Method' templates available \
  // in the Gallery folder 'Chora'.
  // 
  // - In the method 'UpdateViewState()' you can put code to update the state of \
  // views enclosed in your component.
  // 
  // - In the method 'UpdateLayout()' you can put code to perform sophisticated layout \
  // calculation for enclosed views.
  note legend Note1
  {
    attr Bounds = <180,1109,960,1429>;
  }

  $rect <429,529,629,569>
  property float Position = 0;

  $rect <220,529,420,569>
  onset Position
  {
    // Limit to valid range
    if ( value >  1.0 ) value =  1.0;
    if ( value < -1.0 ) value = -1.0;

    // The value doesn't change - nothing to do.
    if ( pure Position == value )
      return;

    // Remember the property's new value.
    pure Position = value;

    // Just request the component to update itself
    InvalidateViewState();
  }

  $rect <20,20,160,60>
  object Views::Rectangle Rectangle
  {
    preset Bounds = <0,0,800,480>;
    preset Color = #11120FFF;
  }

  $rect <20,20,160,60>
  object Views::WarpImage WarpImage
  {
    preset Point4 = <400,442>;
    preset Point3 = <414,442>;
    preset Point2 = <414,202>;
    preset Point1 = <400,202>;
    preset SourceAnchor = <3,100>;
    preset Color = #FF0000FF;
    preset Bitmap = Resources::GaugeNeedle;
  }
}
